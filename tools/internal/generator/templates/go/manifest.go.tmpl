/*
* SPDX-FileCopyrightText: The terraform-provider-k8s Authors
* SPDX-License-Identifier: 0BSD
*/

package {{ .Package }}

import (
	"context"
	{{ if .Namespaced -}}
	"fmt"
	{{ end -}}
	{{ if .AdditionalImports.Int64Validator -}}
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	{{ end -}}
	{{ if .AdditionalImports.Float64Validator -}}
	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	{{ end -}}
	{{ if .AdditionalImports.ListValidator -}}
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	{{ end -}}
	{{ if .AdditionalImports.MapValidator -}}
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	{{ end -}}
	{{ if .AdditionalImports.ObjectValidator -}}
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	{{ end -}}
	{{ if .AdditionalImports.Regexp -}}
	"regexp"
	{{ end -}}
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	{{ if .AdditionalImports.Path -}}
	"github.com/hashicorp/terraform-plugin-framework/path"
	{{ end -}}
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/metio/terraform-provider-k8s/internal/utilities"
	"github.com/metio/terraform-provider-k8s/internal/validators"
	"k8s.io/utils/pointer"
	{{ if .AdditionalImports.MathBig -}}
	"math/big"
	{{ end -}}
	"sigs.k8s.io/yaml"
)

var (
	_ datasource.DataSource = &{{ .ManifestTypeStruct }}{}
)

func New{{ .ManifestTypeStruct }}() datasource.DataSource {
	return &{{ .ManifestTypeStruct }}{}
}

type {{ .ManifestTypeStruct }} struct{}

type {{ .ManifestDataStruct }} struct {
	ID   types.String {{ .BT }}tfsdk:"id" json:"-"{{ .BT }}
	YAML types.String {{ .BT }}tfsdk:"yaml" json:"-"{{ .BT }}

	ApiVersion *string {{ .BT }}tfsdk:"-" json:"apiVersion"{{ .BT }}
	Kind *string {{ .BT }}tfsdk:"-" json:"kind"{{ .BT }}

	Metadata struct {
		Name string {{ .BT }}tfsdk:"name" json:"name"{{ .BT }}
		{{ if .Namespaced -}}
		Namespace string {{ .BT }}tfsdk:"namespace" json:"namespace"{{ .BT }}
		{{ end -}}
		Labels map[string]string {{ .BT }}tfsdk:"labels" json:"labels,omitempty"{{ .BT }}
		Annotations map[string]string {{ .BT }}tfsdk:"annotations" json:"annotations,omitempty"{{ .BT }}
	} {{ .BT }}tfsdk:"metadata" json:"metadata"{{ .BT }}

	{{ range $index, $property := .Properties -}}
	{{ template "json_attribute.go.tmpl" $property }}
	{{ end -}}
}

func (r *{{ .ManifestTypeStruct }}) Metadata(_ context.Context, request datasource.MetadataRequest, response *datasource.MetadataResponse) {
	response.TypeName = request.ProviderTypeName + "_{{ .ManifestTypeName }}"
}

func (r *{{ .ManifestTypeStruct }}) Schema(_ context.Context, _ datasource.SchemaRequest, response *datasource.SchemaResponse) {
	response.Schema = schema.Schema{
		Description:         "{{ .Description }}",
		MarkdownDescription: "{{ .Description }}",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				{{ if .Namespaced -}}
				Description:         "Contains the value 'metadata.namespace/metadata.name'.",
				MarkdownDescription: "Contains the value `metadata.namespace/metadata.name`.",
				{{ else -}}
				Description:         "Contains the value 'metadata.name'.",
				MarkdownDescription: "Contains the value `metadata.name`.",
				{{ end -}}
				Required:            false,
				Optional:            false,
				Computed:            true,
			},

			"yaml": schema.StringAttribute{
				Description:         "The generated manifest in YAML format.",
				MarkdownDescription: "The generated manifest in YAML format.",
				Required:            false,
				Optional:            false,
				Computed:            true,
			},

			"metadata": schema.SingleNestedAttribute{
				Description:         "Data that helps uniquely identify this object. See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata for more details.",
				MarkdownDescription: "Data that helps uniquely identify this object. See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata for more details.",
				Required:            true,
				Optional:            false,
				Computed:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						Description:         "Unique identifier for this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names for more details.",
						MarkdownDescription: "Unique identifier for this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names for more details.",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Validators: []validator.String{
							validators.NameValidator(),
							stringvalidator.LengthAtLeast(1),
						},
					},

					{{ if .Namespaced }}
					"namespace": schema.StringAttribute{
						Description:         "Namespaces provides a mechanism for isolating groups of resources within a single cluster. See https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ for more details.",
						MarkdownDescription: "Namespaces provides a mechanism for isolating groups of resources within a single cluster. See https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ for more details.",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Validators: []validator.String{
							validators.NameValidator(),
							stringvalidator.LengthAtLeast(1),
						},
					},
					{{ end }}

					"labels": schema.MapAttribute{
						Description:         "Keys and values that can be used to organize and categorize objects. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more details.",
						MarkdownDescription: "Keys and values that can be used to organize and categorize objects. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more details.",
						ElementType:         types.StringType,
						Required:            false,
						Optional:            true,
						Computed:            false,
						Validators: []validator.Map{
							validators.LabelValidator(),
						},
					},
					"annotations": schema.MapAttribute{
						Description:         "Keys and values that can be used by external tooling to store and retrieve arbitrary metadata about this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ for more details.",
						MarkdownDescription: "Keys and values that can be used by external tooling to store and retrieve arbitrary metadata about this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ for more details.",
						ElementType:         types.StringType,
						Required:            false,
						Optional:            true,
						Computed:            false,
						Validators: []validator.Map{
							validators.AnnotationValidator(),
						},
					},
				},
			},

			{{ range $index, $property := .Properties }}
			{{ template "read_write_schema_attribute.go.tmpl" $property }}
			{{ end }}
		},
	}
}

func (r *{{ .ManifestTypeStruct }}) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	tflog.Debug(ctx, "Read resource {{ .FullManifestTypeName }}")

	var model {{ .ManifestDataStruct }}
	response.Diagnostics.Append(request.Config.Get(ctx, &model)...)
	if response.Diagnostics.HasError() {
		return
	}

	{{ if .Namespaced -}}
	model.ID = types.StringValue(fmt.Sprintf("%s/%s", model.Metadata.Namespace, model.Metadata.Name))
	{{ else -}}
	model.ID = types.StringValue(model.Metadata.Name)
	{{ end -}}
	{{ if .Group -}}
	model.ApiVersion = pointer.String("{{ .Group }}/{{ .Version }}")
	{{ else -}}
	model.ApiVersion = pointer.String("{{ .Version }}")
	{{ end -}}
	model.Kind = pointer.String("{{ .Kind }}")

	y, err := yaml.Marshal(model)
	if err != nil {
		response.Diagnostics.Append(utilities.MarshalYamlError(err))
		return
	}
	model.YAML = types.StringValue(string(y))

	response.Diagnostics.Append(response.State.Set(ctx, &model)...)
}
