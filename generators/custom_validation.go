//go:build generators

/*
 * SPDX-FileCopyrightText: The terraform-provider-k8s Authors
 * SPDX-License-Identifier: 0BSD
 */

package main

var customValidations = map[string]map[string][]string{
	"apps_daemon_set_v1": {
		"spec.minReadySeconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                              {"int64validator.AtLeast(0)"},
		"spec.revisionHistoryLimit":                                  {"int64validator.AtLeast(0)"},
		"spec.selector.matchLabels":                                  {"validators.LabelValidator()"},
		"spec.template.metadata.annotations":                         {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                              {"validators.LabelValidator()"},
		"spec.template.spec.activeDeadlineSeconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.imagePullPolicy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.containerPort":          {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.hostPort":               {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":               {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dnsPolicy":                               {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.updateStrategy.type":                                   {`stringvalidator.OneOf("RollingUpdate", "OnDelete")`},
		"spec.template.spec.ephemeralContainers.imagePullPolicy":     {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeralContainers.ports.containerPort": {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.hostPort":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.protocol":      {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.initContainers.imagePullPolicy":          {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.initContainers.ports.containerPort":      {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.hostPort":           {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.protocol":           {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemptionPolicy":                        {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restartPolicy":                           {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.terminationGracePeriodSeconds":           {"int64validator.AtLeast(0)"},
	},
	"apps_deployment_v1": {
		"spec.minReadySeconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                              {"int64validator.AtLeast(0)"},
		"spec.revisionHistoryLimit":                                  {"int64validator.AtLeast(0)"},
		"spec.selector.matchLabels":                                  {"validators.LabelValidator()"},
		"spec.strategy.type":                                         {`stringvalidator.OneOf("Recreate", "RollingUpdate")`},
		"spec.template.metadata.annotations":                         {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                              {"validators.LabelValidator()"},
		"spec.template.spec.activeDeadlineSeconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.imagePullPolicy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.containerPort":          {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.hostPort":               {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":               {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dnsPolicy":                               {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.template.spec.ephemeralContainers.imagePullPolicy":     {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeralContainers.ports.containerPort": {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.hostPort":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.protocol":      {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.initContainers.imagePullPolicy":          {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.initContainers.ports.containerPort":      {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.hostPort":           {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.protocol":           {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemptionPolicy":                        {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restartPolicy":                           {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.terminationGracePeriodSeconds":           {"int64validator.AtLeast(0)"},
	},
	"apps_replica_set_v1": {
		"spec.minReadySeconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                              {"int64validator.AtLeast(0)"},
		"spec.selector.matchLabels":                                  {"validators.LabelValidator()"},
		"spec.template.metadata.annotations":                         {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                              {"validators.LabelValidator()"},
		"spec.template.spec.activeDeadlineSeconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.imagePullPolicy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.containerPort":          {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.hostPort":               {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":               {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dnsPolicy":                               {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.template.spec.ephemeralContainers.imagePullPolicy":     {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeralContainers.ports.containerPort": {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.hostPort":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.protocol":      {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.initContainers.imagePullPolicy":          {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.initContainers.ports.containerPort":      {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.hostPort":           {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.protocol":           {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemptionPolicy":                        {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restartPolicy":                           {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.terminationGracePeriodSeconds":           {"int64validator.AtLeast(0)"},
	},
	"apps_stateful_set_v1": {
		"spec.minReadySeconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                              {"int64validator.AtLeast(0)"},
		"spec.revisionHistoryLimit":                                  {"int64validator.AtLeast(0)"},
		"spec.selector.matchLabels":                                  {"validators.LabelValidator()"},
		"spec.template.metadata.annotations":                         {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                              {"validators.LabelValidator()"},
		"spec.template.spec.activeDeadlineSeconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.imagePullPolicy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.containerPort":          {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.hostPort":               {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":               {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dnsPolicy":                               {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.template.spec.ephemeralContainers.imagePullPolicy":     {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeralContainers.ports.containerPort": {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.hostPort":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeralContainers.ports.protocol":      {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.initContainers.imagePullPolicy":          {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.initContainers.ports.containerPort":      {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.hostPort":           {"validators.PortValidator()"},
		"spec.template.spec.initContainers.ports.protocol":           {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemptionPolicy":                        {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restartPolicy":                           {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.terminationGracePeriodSeconds":           {"int64validator.AtLeast(0)"},
		"spec.updateStrategy.type":                                   {`stringvalidator.OneOf("Recreate", "RollingUpdate")`},
	},
}
