/*
* SPDX-FileCopyrightText: The terraform-provider-k8s Authors
* SPDX-License-Identifier: 0BSD
 */

package kmm_sigs_x_k8s_io_v1beta1

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/metio/terraform-provider-k8s/internal/utilities"
	"github.com/metio/terraform-provider-k8s/internal/validators"
	"k8s.io/utils/pointer"
	"sigs.k8s.io/yaml"
)

var (
	_ datasource.DataSource = &KmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest{}
)

func NewKmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest() datasource.DataSource {
	return &KmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest{}
}

type KmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest struct{}

type KmmSigsXK8SIoNodeModulesConfigV1Beta1ManifestData struct {
	YAML types.String `tfsdk:"yaml" json:"-"`

	ApiVersion *string `tfsdk:"-" json:"apiVersion"`
	Kind       *string `tfsdk:"-" json:"kind"`

	Metadata struct {
		Name        string            `tfsdk:"name" json:"name"`
		Labels      map[string]string `tfsdk:"labels" json:"labels,omitempty"`
		Annotations map[string]string `tfsdk:"annotations" json:"annotations,omitempty"`
	} `tfsdk:"metadata" json:"metadata"`

	Spec *struct {
		Modules *[]struct {
			Config *struct {
				ContainerImage        *string   `tfsdk:"container_image" json:"containerImage,omitempty"`
				InTreeModuleToRemove  *string   `tfsdk:"in_tree_module_to_remove" json:"inTreeModuleToRemove,omitempty"`
				InTreeModulesToRemove *[]string `tfsdk:"in_tree_modules_to_remove" json:"inTreeModulesToRemove,omitempty"`
				InsecurePull          *bool     `tfsdk:"insecure_pull" json:"insecurePull,omitempty"`
				KernelVersion         *string   `tfsdk:"kernel_version" json:"kernelVersion,omitempty"`
				Modprobe              *struct {
					Args *struct {
						Load   *[]string `tfsdk:"load" json:"load,omitempty"`
						Unload *[]string `tfsdk:"unload" json:"unload,omitempty"`
					} `tfsdk:"args" json:"args,omitempty"`
					DirName             *string   `tfsdk:"dir_name" json:"dirName,omitempty"`
					FirmwarePath        *string   `tfsdk:"firmware_path" json:"firmwarePath,omitempty"`
					ModuleName          *string   `tfsdk:"module_name" json:"moduleName,omitempty"`
					ModulesLoadingOrder *[]string `tfsdk:"modules_loading_order" json:"modulesLoadingOrder,omitempty"`
					Parameters          *[]string `tfsdk:"parameters" json:"parameters,omitempty"`
					RawArgs             *struct {
						Load   *[]string `tfsdk:"load" json:"load,omitempty"`
						Unload *[]string `tfsdk:"unload" json:"unload,omitempty"`
					} `tfsdk:"raw_args" json:"rawArgs,omitempty"`
				} `tfsdk:"modprobe" json:"modprobe,omitempty"`
			} `tfsdk:"config" json:"config,omitempty"`
			ImageRepoSecret *struct {
				Name *string `tfsdk:"name" json:"name,omitempty"`
			} `tfsdk:"image_repo_secret" json:"imageRepoSecret,omitempty"`
			Name               *string `tfsdk:"name" json:"name,omitempty"`
			Namespace          *string `tfsdk:"namespace" json:"namespace,omitempty"`
			ServiceAccountName *string `tfsdk:"service_account_name" json:"serviceAccountName,omitempty"`
		} `tfsdk:"modules" json:"modules,omitempty"`
	} `tfsdk:"spec" json:"spec,omitempty"`
}

func (r *KmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest) Metadata(_ context.Context, request datasource.MetadataRequest, response *datasource.MetadataResponse) {
	response.TypeName = request.ProviderTypeName + "_kmm_sigs_x_k8s_io_node_modules_config_v1beta1_manifest"
}

func (r *KmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest) Schema(_ context.Context, _ datasource.SchemaRequest, response *datasource.SchemaResponse) {
	response.Schema = schema.Schema{
		Description:         "NodeModulesConfig keeps spec and state of the KMM modules on a node.",
		MarkdownDescription: "NodeModulesConfig keeps spec and state of the KMM modules on a node.",
		Attributes: map[string]schema.Attribute{
			"yaml": schema.StringAttribute{
				Description:         "The generated manifest in YAML format.",
				MarkdownDescription: "The generated manifest in YAML format.",
				Required:            false,
				Optional:            false,
				Computed:            true,
			},

			"metadata": schema.SingleNestedAttribute{
				Description:         "Data that helps uniquely identify this object. See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata for more details.",
				MarkdownDescription: "Data that helps uniquely identify this object. See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata for more details.",
				Required:            true,
				Optional:            false,
				Computed:            false,
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						Description:         "Unique identifier for this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names for more details.",
						MarkdownDescription: "Unique identifier for this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names for more details.",
						Required:            true,
						Optional:            false,
						Computed:            false,
						Validators: []validator.String{
							validators.NameValidator(),
							stringvalidator.LengthAtLeast(1),
						},
					},

					"labels": schema.MapAttribute{
						Description:         "Keys and values that can be used to organize and categorize objects. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more details.",
						MarkdownDescription: "Keys and values that can be used to organize and categorize objects. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more details.",
						ElementType:         types.StringType,
						Required:            false,
						Optional:            true,
						Computed:            false,
						Validators: []validator.Map{
							validators.LabelValidator(),
						},
					},
					"annotations": schema.MapAttribute{
						Description:         "Keys and values that can be used by external tooling to store and retrieve arbitrary metadata about this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ for more details.",
						MarkdownDescription: "Keys and values that can be used by external tooling to store and retrieve arbitrary metadata about this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ for more details.",
						ElementType:         types.StringType,
						Required:            false,
						Optional:            true,
						Computed:            false,
						Validators: []validator.Map{
							validators.AnnotationValidator(),
						},
					},
				},
			},

			"spec": schema.SingleNestedAttribute{
				Description:         "NodeModulesConfigSpec describes the desired state of modules on the nodeMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
				MarkdownDescription: "NodeModulesConfigSpec describes the desired state of modules on the nodeMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
				Attributes: map[string]schema.Attribute{
					"modules": schema.ListNestedAttribute{
						Description:         "Modules list the spec of all the modules that need to be executedon the node",
						MarkdownDescription: "Modules list the spec of all the modules that need to be executedon the node",
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"config": schema.SingleNestedAttribute{
									Description:         "",
									MarkdownDescription: "",
									Attributes: map[string]schema.Attribute{
										"container_image": schema.StringAttribute{
											Description:         "",
											MarkdownDescription: "",
											Required:            true,
											Optional:            false,
											Computed:            false,
										},

										"in_tree_module_to_remove": schema.StringAttribute{
											Description:         "",
											MarkdownDescription: "",
											Required:            false,
											Optional:            true,
											Computed:            false,
										},

										"in_tree_modules_to_remove": schema.ListAttribute{
											Description:         "",
											MarkdownDescription: "",
											ElementType:         types.StringType,
											Required:            false,
											Optional:            true,
											Computed:            false,
										},

										"insecure_pull": schema.BoolAttribute{
											Description:         "When InsecurePull is true, the container image can be pulled without TLS.",
											MarkdownDescription: "When InsecurePull is true, the container image can be pulled without TLS.",
											Required:            true,
											Optional:            false,
											Computed:            false,
										},

										"kernel_version": schema.StringAttribute{
											Description:         "",
											MarkdownDescription: "",
											Required:            true,
											Optional:            false,
											Computed:            false,
										},

										"modprobe": schema.SingleNestedAttribute{
											Description:         "",
											MarkdownDescription: "",
											Attributes: map[string]schema.Attribute{
												"args": schema.SingleNestedAttribute{
													Description:         "Args is an optional list of arguments to be passed to modprobe before the name of the kernel module.The resulting commands will be: 'modprobe ${Args} module_name'.",
													MarkdownDescription: "Args is an optional list of arguments to be passed to modprobe before the name of the kernel module.The resulting commands will be: 'modprobe ${Args} module_name'.",
													Attributes: map[string]schema.Attribute{
														"load": schema.ListAttribute{
															Description:         "Load is an optional list of arguments to be used when loading the kernel module.",
															MarkdownDescription: "Load is an optional list of arguments to be used when loading the kernel module.",
															ElementType:         types.StringType,
															Required:            false,
															Optional:            true,
															Computed:            false,
														},

														"unload": schema.ListAttribute{
															Description:         "Unload is an optional list of arguments to be used when unloading the kernel module.",
															MarkdownDescription: "Unload is an optional list of arguments to be used when unloading the kernel module.",
															ElementType:         types.StringType,
															Required:            false,
															Optional:            true,
															Computed:            false,
														},
													},
													Required: false,
													Optional: true,
													Computed: false,
												},

												"dir_name": schema.StringAttribute{
													Description:         "DirName is the root directory for modules.It adds '-d ${DirName}' to the modprobe command-line.",
													MarkdownDescription: "DirName is the root directory for modules.It adds '-d ${DirName}' to the modprobe command-line.",
													Required:            false,
													Optional:            true,
													Computed:            false,
												},

												"firmware_path": schema.StringAttribute{
													Description:         "FirmwarePath is the path of the firmware(s).The firmware(s) will be copied to the host for the kernel to find them.",
													MarkdownDescription: "FirmwarePath is the path of the firmware(s).The firmware(s) will be copied to the host for the kernel to find them.",
													Required:            false,
													Optional:            true,
													Computed:            false,
												},

												"module_name": schema.StringAttribute{
													Description:         "ModuleName is the name of the Module to be loaded.This field can only be unset if rawArgs is set.",
													MarkdownDescription: "ModuleName is the name of the Module to be loaded.This field can only be unset if rawArgs is set.",
													Required:            false,
													Optional:            true,
													Computed:            false,
												},

												"modules_loading_order": schema.ListAttribute{
													Description:         "ModulesLoadingOrder defines the dependency between kernel modules loading, in caseit was not created by depmod (independent kernel modules).The list order should be: upmost module, then the module it depends on and so on.Example: if moduleA depends on first loading moduleB, and moduleB depends on first loading moduleCthe entry should look:ModulesLoadingOrder:   - moduleA   - moduleB   - moduleCIn order to load all 3 modules, moduleA shoud be defined in the ModuleName parameter of this struct",
													MarkdownDescription: "ModulesLoadingOrder defines the dependency between kernel modules loading, in caseit was not created by depmod (independent kernel modules).The list order should be: upmost module, then the module it depends on and so on.Example: if moduleA depends on first loading moduleB, and moduleB depends on first loading moduleCthe entry should look:ModulesLoadingOrder:   - moduleA   - moduleB   - moduleCIn order to load all 3 modules, moduleA shoud be defined in the ModuleName parameter of this struct",
													ElementType:         types.StringType,
													Required:            false,
													Optional:            true,
													Computed:            false,
												},

												"parameters": schema.ListAttribute{
													Description:         "Parameters is an optional list of kernel module parameters to be provided to modprobe.They should be in the form of key=value and will be separated by spaces in the modprobe command.The resulting loading command will be: 'modprobe module_name ${Parameters}'.",
													MarkdownDescription: "Parameters is an optional list of kernel module parameters to be provided to modprobe.They should be in the form of key=value and will be separated by spaces in the modprobe command.The resulting loading command will be: 'modprobe module_name ${Parameters}'.",
													ElementType:         types.StringType,
													Required:            false,
													Optional:            true,
													Computed:            false,
												},

												"raw_args": schema.SingleNestedAttribute{
													Description:         "If RawArgs are specified, they are passed straight to the modprobe binary; all other properties in thisobject are ignored.The resulting commands will be: 'modprobe ${RawArgs}'.",
													MarkdownDescription: "If RawArgs are specified, they are passed straight to the modprobe binary; all other properties in thisobject are ignored.The resulting commands will be: 'modprobe ${RawArgs}'.",
													Attributes: map[string]schema.Attribute{
														"load": schema.ListAttribute{
															Description:         "Load is an optional list of arguments to be used when loading the kernel module.",
															MarkdownDescription: "Load is an optional list of arguments to be used when loading the kernel module.",
															ElementType:         types.StringType,
															Required:            false,
															Optional:            true,
															Computed:            false,
														},

														"unload": schema.ListAttribute{
															Description:         "Unload is an optional list of arguments to be used when unloading the kernel module.",
															MarkdownDescription: "Unload is an optional list of arguments to be used when unloading the kernel module.",
															ElementType:         types.StringType,
															Required:            false,
															Optional:            true,
															Computed:            false,
														},
													},
													Required: false,
													Optional: true,
													Computed: false,
												},
											},
											Required: true,
											Optional: false,
											Computed: false,
										},
									},
									Required: true,
									Optional: false,
									Computed: false,
								},

								"image_repo_secret": schema.SingleNestedAttribute{
									Description:         "LocalObjectReference contains enough information to let you locate thereferenced object inside the same namespace.",
									MarkdownDescription: "LocalObjectReference contains enough information to let you locate thereferenced object inside the same namespace.",
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Description:         "Name of the referent.More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#namesTODO: Add other useful fields. apiVersion, kind, uid?",
											MarkdownDescription: "Name of the referent.More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#namesTODO: Add other useful fields. apiVersion, kind, uid?",
											Required:            false,
											Optional:            true,
											Computed:            false,
										},
									},
									Required: false,
									Optional: true,
									Computed: false,
								},

								"name": schema.StringAttribute{
									Description:         "",
									MarkdownDescription: "",
									Required:            true,
									Optional:            false,
									Computed:            false,
								},

								"namespace": schema.StringAttribute{
									Description:         "",
									MarkdownDescription: "",
									Required:            true,
									Optional:            false,
									Computed:            false,
								},

								"service_account_name": schema.StringAttribute{
									Description:         "",
									MarkdownDescription: "",
									Required:            true,
									Optional:            false,
									Computed:            false,
								},
							},
						},
						Required: false,
						Optional: true,
						Computed: false,
					},
				},
				Required: false,
				Optional: true,
				Computed: false,
			},
		},
	}
}

func (r *KmmSigsXK8SIoNodeModulesConfigV1Beta1Manifest) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	tflog.Debug(ctx, "Read resource k8s_kmm_sigs_x_k8s_io_node_modules_config_v1beta1_manifest")

	var model KmmSigsXK8SIoNodeModulesConfigV1Beta1ManifestData
	response.Diagnostics.Append(request.Config.Get(ctx, &model)...)
	if response.Diagnostics.HasError() {
		return
	}

	model.ApiVersion = pointer.String("kmm.sigs.x-k8s.io/v1beta1")
	model.Kind = pointer.String("NodeModulesConfig")

	y, err := yaml.Marshal(model)
	if err != nil {
		response.Diagnostics.Append(utilities.MarshalYamlError(err))
		return
	}
	model.YAML = types.StringValue(string(y))

	response.Diagnostics.Append(response.State.Set(ctx, &model)...)
}
