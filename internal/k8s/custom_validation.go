/*
 * SPDX-FileCopyrightText: The terraform-provider-k8s Authors
 * SPDX-License-Identifier: 0BSD
 */

package k8s

var customValidations = map[string]map[string][]string{
	"apps_daemon_set_v1": {
		"spec.min_ready_seconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                                {"int64validator.AtLeast(0)"},
		"spec.revision_history_limit":                                  {"int64validator.AtLeast(0)"},
		"spec.selector.match_labels":                                   {"validators.LabelValidator()"},
		"spec.template.metadata.annotations":                           {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                                {"validators.LabelValidator()"},
		"spec.template.spec.active_deadline_seconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.image_pull_policy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.container_port":           {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.host_port":                {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":                 {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dns_policy":                                {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.update_strategy.type":                                    {`stringvalidator.OneOf("RollingUpdate", "OnDelete")`},
		"spec.template.spec.ephemeral_containers.image_pull_policy":    {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeral_containers.ports.container_port": {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.host_port":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.protocol":       {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.init_containers.image_pull_policy":         {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.init_containers.ports.container_port":      {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.host_port":           {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.protocol":            {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemption_policy":                         {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restart_policy":                            {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.termination_grace_period_seconds":          {"int64validator.AtLeast(0)"},
	},
	"apps_deployment_v1": {
		"spec.min_ready_seconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                                {"int64validator.AtLeast(0)"},
		"spec.revision_history_limit":                                  {"int64validator.AtLeast(0)"},
		"spec.selector.match_labels":                                   {"validators.LabelValidator()"},
		"spec.strategy.type":                                           {`stringvalidator.OneOf("Recreate", "RollingUpdate")`},
		"spec.template.metadata.annotations":                           {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                                {"validators.LabelValidator()"},
		"spec.template.spec.active_deadline_seconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.image_pull_policy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.container_port":           {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.host_port":                {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":                 {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dns_policy":                                {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.template.spec.ephemeral_containers.image_pull_policy":    {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeral_containers.ports.container_port": {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.host_port":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.protocol":       {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.init_containers.image_pull_policy":         {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.init_containers.ports.container_port":      {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.host_port":           {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.protocol":            {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemption_policy":                         {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restart_policy":                            {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.termination_grace_period_seconds":          {"int64validator.AtLeast(0)"},
	},
	"apps_replica_set_v1": {
		"spec.min_ready_seconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                                {"int64validator.AtLeast(0)"},
		"spec.selector.match_labels":                                   {"validators.LabelValidator()"},
		"spec.template.metadata.annotations":                           {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                                {"validators.LabelValidator()"},
		"spec.template.spec.active_deadline_seconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.image_pull_policy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.container_port":           {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.host_port":                {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":                 {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dns_policy":                                {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.template.spec.ephemeral_containers.image_pull_policy":    {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeral_containers.ports.container_port": {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.host_port":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.protocol":       {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.init_containers.image_pull_policy":         {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.init_containers.ports.container_port":      {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.host_port":           {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.protocol":            {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemption_policy":                         {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restart_policy":                            {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.termination_grace_period_seconds":          {"int64validator.AtLeast(0)"},
	},
	"apps_stateful_set_v1": {
		"spec.min_ready_seconds":                                       {"int64validator.AtLeast(0)"},
		"spec.replicas":                                                {"int64validator.AtLeast(0)"},
		"spec.revision_history_limit":                                  {"int64validator.AtLeast(0)"},
		"spec.selector.match_labels":                                   {"validators.LabelValidator()"},
		"spec.template.metadata.annotations":                           {"validators.AnnotationValidator()"},
		"spec.template.metadata.labels":                                {"validators.LabelValidator()"},
		"spec.template.spec.active_deadline_seconds":                   {"int64validator.AtLeast(0)"},
		"spec.template.spec.containers.image_pull_policy":              {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.containers.ports.container_port":           {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.host_port":                {"validators.PortValidator()"},
		"spec.template.spec.containers.ports.protocol":                 {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.dns_policy":                                {`stringvalidator.OneOf("ClusterFirstWithHostNet", "ClusterFirst", "Default", "None")`},
		"spec.template.spec.ephemeral_containers.image_pull_policy":    {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.ephemeral_containers.ports.container_port": {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.host_port":      {"validators.PortValidator()"},
		"spec.template.spec.ephemeral_containers.ports.protocol":       {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.init_containers.image_pull_policy":         {`stringvalidator.OneOf("Always", "Never", "IfNotPresent")`},
		"spec.template.spec.init_containers.ports.container_port":      {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.host_port":           {"validators.PortValidator()"},
		"spec.template.spec.init_containers.ports.protocol":            {`stringvalidator.OneOf("UDP", "TCP", "SCTP")`},
		"spec.template.spec.preemption_policy":                         {`stringvalidator.OneOf("Never", "PreemptLowerPriority")`},
		"spec.template.spec.restart_policy":                            {`stringvalidator.OneOf("Always", "OnFailure", "Never")`},
		"spec.template.spec.termination_grace_period_seconds":          {"int64validator.AtLeast(0)"},
		"spec.update_strategy.type":                                    {`stringvalidator.OneOf("Recreate", "RollingUpdate")`},
	},
}
